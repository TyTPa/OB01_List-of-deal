# Задача:
# Разработать простую игру, где игрок может использовать различные типы оружия
# для борьбы с монстрами. Программа должна быть спроектирована таким образом,
# чтобы легко можно было добавлять новые типы оружия, не изменяя существующий код бойцов или механизм боя.
#
# Исходные данные:
# Есть класс Fighter, представляющий бойца.
# Есть класс Monster, представляющий монстра.
# Игрок управляет бойцом и может выбирать для него одно из вооружений для боя.
#
# Шаг 1: Создайте абстрактный класс для оружия
# Создайте абстрактный класс Weapon, который будет содержать абстрактный метод attack().

from abc import ABC, abstractmethod
class Weapon(ABC):
    @abstractmethod
    def attack(self, weapon):
        self.weapon = weapon
        print(f'Монстр побежден!')
# Шаг 2: Реализуйте конкретные типы оружия
#
# Создайте несколько классов, унаследованных от Weapon, например, Sword и Bow.
# Каждый из этих классов реализует метод attack() своим уникальным способом.
class Sword(Weapon):
#    def __init__(self):
#      super()__init__()
    def attack(self):
        self.weapon = Weapon
        print(f'Боец наносит удар мечом')
        print(f'Монстр побежден')

class Bow(Weapon):
#   def __init__(self):
#      super()__init__()  # Вызов конструктора родительского класса
    def attack(self):
        self.weapon = Weapon
        print(f'Боец наносит удар из лука')
        print(f'Монстр побежден')

class Monster():
    def __init__(self):
     pass

# Шаг 3: Модифицируйте класс Fighter
#
# Добавьте в класс Fighter поле, которое будет хранить объект класса Weapon.
# Добавьте метод change_weapon(), который позволяет изменить оружие бойца.
class Fighter():
    def __init__(self,weapon):
        self.weapon = weapon
    def change_weapon(self, new_weapon):
        self.weapon = new_weapon
        print(f'Боец поменял оружие')


# Шаг 4: Реализация боя
#
# Реализуйте простой механизм для демонстрации боя между бойцом и монстром,
# исходя из выбранного оружия.
# Требования к заданию:
#
# Код должен быть написан на Python.
# Программа должна демонстрировать применение принципа открытости/закрытости:
# новые типы оружия можно легко добавлять, не изменяя существующие классы бойцов и механизм боя.
# Программа должна выводить результат боя в консоль.
f1 = Fighter(Bow)
s1 = Sword()
s2 = Bow()
m1 = Monster()
s1.attack()
f1.change_weapon(s2)
s2.attack()